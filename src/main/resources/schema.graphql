type Query {
    page(pageId: ID!, bookId: ID!): Page!
    pageToEdit(pageId: ID!): Page!
    likedPages(page: Int!): LikedPages

    book(bookId: ID!): Book!
    editBook(bookId: ID!): Book!
    pageIdToRead(bookId: ID!): ID!
    searchedBooks(query: String!, page: Int!): BookList!
    createdBooks(userId: ID!, condition: SearchCondition): BookList!
    createdBooksBySelf(condition: SearchCondition): BookList!
    actionedBooks(userId: ID!, condition: SearchCondition): BookList!
    actionedBooksBySelf(condition: SearchCondition): BookList!
    ownBooks(page: Int!): BookList!
    recentlyViewedBooks: BookList!
    newBooks(page: Int!): BookList!
    famousBooks(page: Int!): BookList!
    famousFreeBooks(page: Int!): BookList!
    paymentIntent(bookId: ID!): PaymentIntent

    user(userId: ID!): User!
    account: Account!
    canSale: Boolean!
    salesLink: SalesLink!
    orderHistories(page: Int!): OrderHistories
}

type User {
    id: ID!
    displayName: String
    imageUrl: String
    description: String
    url: String
    twitterId: String
    githubId: String
}

type Account {
    user: User
}

type SalesLink {
    url: String!
}

type PaymentIntent {
    price: Int!
    secret: String!
}

type Page {
    id: ID!
    number: Int!
    title: String!
    text: String!
    liked: Boolean
    likeCount: Int
    canPreview: Boolean
    createDate: String!
    updateDate: String!
}

type LikedPage {
    id: ID!
    title: String!
    bookId: ID!
    bookTitle: String!
    bookImage: String!
}

type LikedPages {
    pages: [LikedPage]
    sumCount: Int!
}

type Section {
    id: ID!
    number: Int!
    title: String!
    pages: [Page]
    createDate: String
    updateDate: String
}

type BookList {
    books: [Book]
    sumCount: Int
}

type Book {
    id: ID!
    title: String
    imageUrl: String
    description: String
    price: Int
    canSale: Boolean
    features: [String]
    targets: BookTarget
    status: String
    lastViewedPageId: ID

    purchased: Boolean
    purchasedCount: Int

    tags: [Tag]
    sections: [Section]
    author: User

    createDate: String
    updateDate: String
}

type OrderHistories {
    orderHistories : [OrderHistory]!
    sumCount: Int!
}

type OrderHistory {
    bookId: ID!
    title: String!
    imageUrl: String!
    author: User
    price: Int!
    purchaseDate: String!
}

type BookTarget {
    levelStart: Int
    levelEnd: Int
    targetDescriptions: [String]
}

type Books {
    learned: [Book]
    liked: [Book]
    published: [Book]
    drafted: [Book]
}

type ReferenceBook {
    id: ID!
    title: String!
    imageUrl: String!
}

type Tag {
    id: ID!
    name: String!
    relatedCount: Int
}

input SearchCondition {
    filter: String
    sortField: String
    sortOrder: String
    page: Int
    resultCount: Int
}

input PageInput {
    title: String!
    text: String!
}

input BookInput {
    id: ID
    title: String!
    imageUrl: String
    description: String

    tagIds: [String]!
    sections: [SectionInput]!
}

input SectionInput {
    title: String!
    number: Int
    articles: [ContentInput]
}

input ContentInput {
    articleId: ID!
    number: Int
}

input UserInput{
    displayName: String
    description: String
    imageUrl: String
    url: String
    twitterId: String
    githubId: String
}

input BookBaseInput {
    title: String!
    price: Int!
    description: String!
}

input BookTargetsInput {
    levelStart: Int!
    levelEnd: Int!
    targetsDescriptions: [String]!
}

input UserSettingInput {
    skillPublic: Boolean!
    learnPublic: Boolean!
    likePublic: Boolean!
}

type Mutation {
    createPage(bookId: ID!, sectionId: ID!): CreateResponse
    savePage(bookId: ID!, pageId: ID!, page: PageInput!): Boolean
    deletePage(pageId: ID!): Boolean
    reorderPages(bookId: ID!, sectionId: ID!, pageIds: [String]!): Boolean
    updatePageTrialRead(pageId: ID!, canPreview: Boolean): Boolean
    likePage(pageId: ID!): Boolean
    unLikePage(pageId: ID!): Boolean

    createBook: CreateResponse
    updateBookCoverImage(bookId: ID!, imageUrl: String!): Boolean
    updateBookBase(bookId: ID!, bookBase: BookBaseInput!): Boolean
    updateBookFeatures(bookId: ID!, features: [String]!): Boolean
    updateBookTargets(bookId: ID!, targets: BookTargetsInput!): Boolean
    updateBookTags(bookId: ID!, tags: [String]!): Boolean

    publishBook(bookId: ID!): Boolean
    suspendBook(bookId: ID!): Boolean
    deleteBook(bookId: ID!): Boolean

    purchaseBook(paymentIntentId: ID!): Boolean
    addBookShelf(bookId: ID!): Boolean

    addSection(bookId: ID!, title: String!): CreateResponse
    updateSectionTitle(bookId: ID!, sectionId: ID!, title: String!): Boolean
    deleteSection(bookId: ID!, sectionId: ID!): Boolean
    reorderSections(bookId: ID!, sectionIds: [String]!): Boolean

    createUser(displayName: String! imageUrl: String!): CreateResponse
    updateUser(user: UserInput!): Boolean
    updateUserSetting(setting: UserSettingInput): Boolean
    deleteUser: Boolean
    registerStripe(userId: String!, code: String!): Boolean
}

type CreateResponse {
    id: ID!,
}
