type Query {
    allSectionOnArticle(articleId: ID!): [Section]!
    allLikedSections(userId: ID!): [Section]!
    allBookmarkedSections(userId: ID!): [Section]!
    famousSections: [Section]!
    relatedSections: [Section]!

    article(articleId: ID!): ArticleDetail!
    allArticles(userId: ID!): [ArticleOutline]!
    allPublishedArticles(userId: ID!): [ArticleOutline]!
    allDraftedArticles: [ArticleOutline]!
    allLikedArticles(userId: ID!): [ArticleOutline]!
    allLearnedArticles(userId: ID!): [ArticleOutline]!
    famousArticles: [ArticleOutline]!
    relatedArticles: [ArticleOutline]!

    plan(planId: ID!): Plan!
    allPlans(userId: ID!): [Plan]!
    allPublishedPlans(userId: ID!): [Plan]!
    allDraftedPlans: [Plan]!
    allLikedPlans(userId: ID!): [Plan]!
    allLearningPlans(userId: ID!): [Plan]!
    allLearnedPlans(userId: ID!): [Plan]!
    famousPlans: [Plan]!
    relatedPlans: [Plan]!

    user(userId: ID!): User
}

type Plan {
    id: ID!
    title: String!
    description: String!
    elements: [Element]
    image: String!
}

type Element {
    id: ID!
    title: String
    type: String!
    number: Int!
}

type ArticleOutline {
    base: ArticleBase
    author: User
    statistics: ArticleStatistics
}

type ArticleDetail {
    base: ArticleBase
    tags: [Tag]
    author: User
    statistics: ArticleStatistics
    action: ArticleAction
}

type ArticleBase {
    id: ID!
    title: String!
    description: String!
    imageUrl: String!
    status: String!
    createDate: String!
    updateDate: String!
}

type ArticleAction{
    like: Int!
    learned: Int!
}

type ArticleStatistics{
    liked: Boolean!
    learned: Boolean!
}

type Section {
    id: ID!
    title: String!
    texts: [String]
    number: Int!
    authorId: String!
    statistics: SectionStatistics
    action: SectionAction
}

type SectionStatistics{
    like: Int!
    bookmark: Int!
}

type SectionAction{
    liked: Boolean!
    bookmarked: Boolean!
}

type User{
    id: ID!
    displayName: String!
    imageUrl: String!
    description: String!
    tags: [String]!
}

type Tag{
    id: ID!
    name: String!
}

input SectionInput{
    title: String!
    texts: [String!]
    number: Int
}

input ArticleInput {
    title: String!
    imageUrl: String
    description: String
    tags: [String]!
}

input PlanBase {
    title: String!
    description: String!
    tags: [String]!
    imageUrl: String
}

input PlanElementInput{
    targetId: ID!
    title: String!
    type: String!
    number: Int!
}

input UserInput{
    displayName: String!
    userId: String!
    description: String
    imageUrl: String
    url: String
    tags: [String]
}


type Mutation {
    createSection(articleId: ID!, section: SectionInput!): CreateResponse
    updateSection(sectionId: ID!, section: SectionInput!): UpdateResponse
    deleteSection(sectionId: ID! ): UpdateResponse
    bookmarkSection(sectionId: ID!): UpdateResponse
    likeSection(sectionId: ID!): UpdateResponse

    createArticle(article: ArticleInput): CreateResponse
    updateArticle(articleId: ID!, article: ArticleInput): UpdateResponse
    deleteArticle(articleId: ID!): UpdateResponse
    publishArticle(articleId: ID!): UpdateResponse
    draftArticle(articleId: ID!): UpdateResponse
    likeArticle(articleId: ID!): UpdateResponse
    finishArticle(articleId: ID!): UpdateResponse

    createPlanBase(planBase: PlanBase): CreateResponse
    updatePlanBase(planId: ID!, planBase: PlanBase!): UpdateResponse
    createPlanElements(planId: ID!, elements: [PlanElementInput]!): UpdateResponse
    updatePlanElements(planId: ID!, elements: [PlanElementInput]!): UpdateResponse

    deletePlan(planId: ID!): UpdateResponse
    publishPlan(planId: ID!): UpdateResponse
    draftPlan(planId: ID!): UpdateResponse
    startPlan(planId: ID!): UpdateResponse
    stopPlan(planId: ID!): UpdateResponse

    createUser(userInput: UserInput!): CreateResponse
    updateUser(userInput: UserInput!): UpdateResponse
    deleteUser(userInput: UserInput!): UpdateResponse
    followUser(targetUserId: ID!, followerUserId: ID): UpdateResponse
    unFollowUser(targetUserId: ID!, followerUserId: ID): UpdateResponse

    createTag(name: String!): CreateResponse
}

type CreateResponse {
    id: ID!,
    error: Error
}

type UpdateResponse {
    error: Error
}

type Error{
    errorCode: String
    errorMessage: String
}
