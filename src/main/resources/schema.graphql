type Query {
    article(articleId: ID!): Article!
    createdArticles(userId: ID! ,condition: SearchCondition): ArticleList!
    createdArticlesBySelf(condition: SearchCondition): ArticleList!
    actionedArticles(userId: ID! ,condition: SearchCondition): ArticleList!
    actionedArticlesBySelf(condition: SearchCondition): ArticleList!
    famousArticles: [Article]!

    course(courseId: ID!): Course!
    createdCourses(userId: ID! ,condition: SearchCondition): CourseList!
    createdCoursesBySelf(condition: SearchCondition): CourseList!
    actionedCourses(userId: ID! ,condition: SearchCondition): CourseList!
    actionedCoursesBySelf(condition: SearchCondition): CourseList!
    famousCourses: [Course]!

    test(testId: ID!): Test!

    user(userId: ID!): User!
    account: Account!
    famousTags: [Tag]!
    famousSkills: [Skill]!
}

type User {
    id: ID!
    displayName: String
    imageUrl: String
    description: String
    url: String
    twitterId: String
    facebookId: String

    articles: Articles
    courses: Courses
}

type UserSetting {
    skillPublic: Boolean!
    learnPublic: Boolean!
    likePublic: Boolean!
}

type Account {
    user: User
    setting: UserSetting
}

type ArticleBlock {
    id: ID!
    type: String!
    data: String!
}

type ArticleList {
    articles: [Article]
    sumCount: Int
}

type Article {
    id: ID!
    title: String!
    imageUrl: String!
    blocks: [ArticleBlock]!
    status: String!
    createDate: String!
    updateDate: String!

    tags: [Tag]
    author: User
    skills: [Skill]
    actionCount: ActionCount
    accountAction: AccountAction
}

type Articles {
    learned: [Article]
    liked: [Article]
    published: [Article]
    drafted: [Article]
}

type Content {
    id: ID!
    title: String!
    number: Int!
    skills: [Skill]
    learned: Boolean
}

type Section {
    id: ID!
    number: Int!
    title: String!
    contents: [Content]
    createDate: String
    updateDate: String
}

type CourseList {
    courses: [Course]
    sumCount: Int
}

type Course {
    id: ID!
    title: String
    description: String
    imageUrl: String
    status: String
    createDate: String
    updateDate: String

    tags: [Tag]
    sections: [Section]
    author: User

    actionCount: ActionCount
    accountAction: AccountAction
    learnStatus: LearnStatus
}

type Courses {
    learned: [Course]
    liked: [Course]
    published: [Course]
    drafted: [Course]
}

type Test {
    id: ID!
    title: String!
    description: String!
    status: String!
    createDate: String!
    updateDate: String!

    questions: [Question]!
    author: User
}

type Question {
    id: ID!
    text: String!
    type: String!
    showCount: Boolean
    candidates: [String]
}

type Tag {
    id: ID!
    name: String!
    relatedCount: Int
}

type Skill {
    id: ID!
    name: String!
    relatedCount: Int
    level: Int
}

type ActionCount {
    likeCount: Int
    learnedCount: Int
}

type AccountAction {
    liked: Boolean
    learned: Boolean
}

type LearnStatus {
    progress: Int
    status: String
}

input SearchCondition {
    filter: String
    sortField: String
    sortOrder: String
    page: Int
    resultCount: Int
}

input ArticleBlockInput {
    type: String!
    data: String!
}

input ArticleInput {
    id: ID
    title: String!
    imageUrl: String
    blocks: [ArticleBlockInput]

    tagIds: [String]!
    skills: [SkillInput]!
}

input SkillInput {
    id: ID!
    level: Int
}

input CourseInput {
    id: ID
    title: String!
    imageUrl: String
    description: String

    tagIds: [String]!
    sections: [SectionInput]!
}

input SectionInput {
    title: String!
    number: Int
    contents: [ContentInput]
}

input ContentInput {
    articleId: ID!
    number: Int
}

input TestInput {
    id: ID
    title: String!
    description: String!
    referenceCourseId: ID!
    questions: [QuestionInput]!
}

input QuestionInput {
    questionText: String!
    type: String!
    textAnswer: TextAnswerInput
    selectAnswers: [SelectAnswerInput]
    explanations: [ExplanationInput]!
}

input TextAnswerInput {
    answer: String!
    showCount: Boolean!
}

input SelectAnswerInput {
    text: String!
    answer: Boolean!
}

input ExplanationInput {
    text: String!
    referenceIds: [String]!
}

input UserInput{
    displayName: String
    description: String
    imageUrl: String
    url: String
    twitterId: String
    facebookId: String
}

input UserSettingInput {
    skillPublic: Boolean!
    learnPublic: Boolean!
    likePublic: Boolean!
}

type Mutation {
    publishArticle(article: ArticleInput!): CreateResponse
    draftArticle(article: ArticleInput!): CreateResponse
    deleteArticle(articleId: ID!): Boolean

    likeArticle(articleId: ID!): Boolean
    clearLikeArticle(articleId: ID!): Boolean
    learnArticle(articleId: ID!): Boolean
    clearLearnArticle(articleId: ID!): Boolean

    publishCourse(course: CourseInput!):CreateResponse
    draftCourse(course: CourseInput!): CreateResponse
    deleteCourse(courseId: ID!): Boolean

    likeCourse(courseId: ID!): Boolean
    clearLikeCourse(courseId: ID!): Boolean
    startCourse(courseId: ID!): Boolean
    clearStartCourse(courseId: ID!): Boolean
    learnCourse(courseId: ID!): Boolean
    cleaerlearnCourse(courseId: ID!): Boolean

    publishTest(test: TestInput): CreateResponse
    draftTest(test: TestInput): CreateResponse
    deleteTest(testId: ID!): CreateResponse

    createUser(displayName: String! imageUrl: String!): CreateResponse
    updateUser(user: UserInput!): Boolean
    updateUserSetting(setting: UserSettingInput): Boolean
    deleteUser: Boolean

    createTag(name: String!): CreateResponse
    createSkill(name: String!): CreateResponse
}

type CreateResponse {
    id: ID!,
}
