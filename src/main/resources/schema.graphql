type Query {
    allSectionOnArticle(articleId: ID!): [Section]!
    allLikedSections(userId: ID!): [Section]!
    allBookmarkedSections(userId: ID!): [Section]!
    famousSections: [Section]!
    relatedSections: [Section]!

    article(articleId: ID!): ArticleDetail!
    allArticles: [ArticleDetail]!
    allPublishedArticles(userId: ID!): [ArticleDetail]!
    allDraftedArticles: [ArticleDetail]!
    allLikedArticles(userId: ID!): [ArticleDetail]!
    allLearnedArticles(userId: ID!): [ArticleDetail]!
    famousArticles: [ArticleDetail]!
    relatedArticles: [ArticleDetail]!

    plan(planId: ID!): PlanDetail!
    allPlans: [PlanListItem]!
    allPublishedPlans(userId: ID!): [PlanDetail]!
    allDraftedPlans: [PlanDetail]!
    allLikedPlans(userId: ID!): [PlanDetail]!
    allLearningPlans(userId: ID!): [PlanDetail]!
    allLearnedPlans(userId: ID!): [PlanDetail]!
    famousPlans: [PlanDetail]!
    relatedPlans: [PlanDetail]!

    user(userId: ID!): User
}

type PlanListItem{
    base:PlanBase
    tags: [Tag]
    statistics: PlanStatistics
}

type PlanDetail {
    base: PlanBase
    author: User
    tags: [Tag]
    elements: [Element]
    statistics: PlanStatistics,
    action: PlanAction
}

type PlanBase{
    id: ID!
    title: String!
    description: String!
    imageUrl: String!
    status: String!
    createDate: String!
    updateDate: String!
}

type PlanStatistics {
    like: Int!
    learning: Int!
    learned: Int!
}

type PlanAction {
    liked: Boolean!
    learning: Boolean!
    learned: Boolean!
}

type Element {
    id: ID!
    title: String
    imageUrl: String
    type: String!
    number: Int!
}

type ArticleDetail {
    base: ArticleBase
    tags: [Tag]
    author: User
    statistics: ArticleStatistics
    action: ArticleAction
}

type ArticleBase {
    id: ID!
    title: String!
    imageUrl: String!
    status: String!
    createDate: String!
    updateDate: String!
}

type ArticleStatistics {
    like: Int!
    learned: Int!
}

type ArticleAction {
    liked: Boolean!
    learned: Boolean!
}

type Section {
    id: ID!
    title: String!
    text: String!
    number: Int!
    authorId: String!
    statistics: SectionStatistics
    liked: Boolean!
}

type SectionStatistics{
    like: Int!
}

type User{
    id: ID!
    displayName: String!
    imageUrl: String!
    description: String!
    url: String!
    tags: [Tag]
}

type Tag{
    id: ID!
    name: String!
}

input SectionInput{
    title: String!
    text: String!
    number: Int!
}

input ArticleInput {
    title: String!
    imageUrl: String
    tags: [String]!
}

input PlanBaseInput {
    title: String!
    description: String!
    tags: [String]!
    imageUrl: String
}

input PlanElementInput{
    id: ID!
    title: String,
    imageUrl: String,
    type: String!
    number: Int!
}

input UserInput{
    displayName: String!
    description: String
    url: String
    tags: [String]
}


type Mutation {
    createSection(articleId: ID!, section: SectionInput!): CreateResponse
    updateSection(sectionId: ID!, section: SectionInput!): UpdateResponse
    deleteSection(articleId: ID!, sectionId: ID! ): UpdateResponse
    likeSection(sectionId: ID!): UpdateResponse
    deleteLikeSection(sectionId: ID!): UpdateResponse

    initArticle: CreateResponse
   # updateArticle(articleId: ID!, article: ArticleInput): UpdateResponse
    updateArticleTitle(articleId: ID!, title: String!): UpdateResponse
    updateArticleImageUrl(articleId: ID!, url: String!): UpdateImageResponse
    updateArticleTags(articleId: ID!, tags: [String]!): UpdateResponse
    deleteArticle(articleId: ID!): UpdateResponse
    publishArticle(articleId: ID!): UpdateResponse
    draftArticle(articleId: ID!): UpdateResponse
    likeArticle(articleId: ID!): UpdateResponse
    deleteLikeArticle(articleId: ID!): UpdateResponse
    finishArticle(articleId: ID!): UpdateResponse
    deleteFinishArticle(articleId: ID!): UpdateResponse

    initPlan: CreateResponse
    updatePlanTitle(planId: ID!, title: String!): UpdateResponse
    updatePlanImageUrl(planId: ID!, url: String!): UpdateImageResponse
    updatePlanTags(planId: ID!, tags: [String]!): UpdateResponse
    updatePlanDescription(planId: ID!, description: String!): UpdateResponse
    createPlanBase(planBase: PlanBaseInput): CreateResponse
    updatePlanBase(planId: ID!, planBase: PlanBaseInput!): UpdateResponse
    createPlanElements(planId: ID!, elements: [PlanElementInput]!): UpdateResponse
    updatePlanElements(planId: ID!, elements: [PlanElementInput]!): UpdateResponse

    deletePlan(planId: ID!): UpdateResponse
    publishPlan(planId: ID!): UpdateResponse
    savePlan(planId: ID!, elements: [PlanElementInput], description: String, tags: [String]): UpdateResponse
    draftPlan(planId: ID!): UpdateResponse
    startPlan(planId: ID!): UpdateResponse
    stopPlan(planId: ID!): UpdateResponse
    finishPlan(planId: ID!): UpdateResponse

    createUser(user: UserInput!): UpdateResponse
    updateUser(user: UserInput!): UpdateResponse
    updateUserImage(imageUrl: String!):UpdateImageResponse
    deleteUser: UpdateResponse
    followUser(userId: ID!): UpdateResponse
    unFollowUser(userId: ID!): UpdateResponse

    createTag(name: String!): CreateTagResponse
}

type CreateResponse {
    id: ID!,
    error: Error
}

type CreateTagResponse {
    id: ID!,
    name: String!
    error: Error
}

type UpdateResponse {
    error: Error
}

type UpdateImageResponse {
    url: String
    error: Error
}


type Error{
    errorCode: String
    errorMessage: String
}
