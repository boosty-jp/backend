type Query {
    article(articleId: ID!): Article!
    allArticles: [Article]!
    allPublishedArticles(userId: ID!): [Article]!
    allDraftedArticles: [Article]!
    allLikedArticles(userId: ID!): [Article]!
    allLearnedArticles(userId: ID!): [Article]!
    famousArticles: [Article]!

    course(courseId: ID!): Course!
    allCourses: [Course]!
    allPublishedCourses(userId: ID!): [Course]!
    allDraftedCourses: [Course]!
    allLikedCourses: [Course]!
    allLearningCourses(userId: ID!): [Course]!
    allLearnedCourses(userId: ID!): [Course]!
    famousCourses: [Course]!

    user(userId: ID!): User!
    account: Account!
    famousTags: [Tag]!
    famousSkills: [Skill]!
}

type User {
    id: ID!
    displayName: String
    imageUrl: String
    description: String
    url: String
    twitterId: String
    facebookId: String

    articles: Articles
    courses: Courses
}

type UserSetting {
    skillPublic: Boolean!
    learnPublic: Boolean!
    likePublic: Boolean!
}

type Account {
    user: User
    setting: UserSetting
}

type Article {
    id: ID!
    title: String!
    imageUrl: String!
    status: String!
    textUrl: String!
    createDate: String!
    updateDate: String!

    tags: [Tag]
    author: User
    skills: [Skill]
    actionCount: ActionCount
    accountAction: AccountAction
}

type Articles {
    learned: [Article]
    liked: [Article]
    published: [Article]
    drafted: [Article]
}

type Content {
    article: Article!
    number: Int!
}

type Section {
    id: ID!
    number: Int!
    title: String!
    contents: [Content]
    createDate: String
    updateDate: String
}

type Course {
    id: ID!
    title: String
    description: String
    imageUrl: String
    status: String
    createDate: String
    updateDate: String

    tags: [Tag]
    sections: [Section]
    author: User

    actionCount: ActionCount
    accountAction: AccountAction
    learnStatus: LearnStatus
}

type Courses {
    learned: [Course]
    liked: [Course]
    published: [Course]
    drafted: [Course]
}

type Tag {
    id: ID!
    name: String!
    relatedCount: Int
}

type Skill {
    id: ID!
    name: String!
    relatedCount: Int
    level: Int
}

type ActionCount {
    likeCount: Int
    learedCount: Int
}

type AccountAction {
    liked: Boolean
    learned: Boolean
}

type LearnStatus {
    progress: Int
    status: String
}

input ArticleInput {
    id: ID!
    title: String!
    imageUrl: String
    textUrl: String!

    tagIds: [String]!
    skills: [SkillInput]!
}

input SkillInput {
    id: ID!
    level: Int
}

input CourseInput {
    id: ID!
    title: String!
    imageUrl: String
    description: String

    tagIds: [String]!
    sections: [SectionInput]!
}

input SectionInput {
    title: String!
    number: Int
    contents: [ContentInput]
}

input ContentInput {
    articleId: ID!
    number: Int
}

input UserInput{
    displayName: String!
    description: String
    imageUrl: String
    url: String
    twitterId: String
    facebookId: String
}

input UserSettingInput {
    skillPublic: Boolean!
    learnPublic: Boolean!
    likePublic: Boolean!
}

type Mutation {
    publishArticle(articleId: ID, article: ArticleInput!): UpdateResponse
    draftArticle(articleId: ID, article: ArticleInput!): UpdateResponse
    deleteArticle(articleId: ID!): UpdateResponse

    likeArticle(articleId: ID!): UpdateResponse
    deleteLikeArticle(articleId: ID!): UpdateResponse
    learnArticle(articleId: ID!): UpdateResponse
    deleteLearnArticle(articleId: ID!): UpdateResponse

    publishCourse(courseId: ID, course: CourseInput!): UpdateResponse
    draftCourse(courseId: ID, course: CourseInput!): UpdateResponse
    deleteCourse(courseId: ID!): UpdateResponse

    likeCourse(courseId: ID!): UpdateResponse
    deleteLikeCourse(courseId: ID!): UpdateResponse
    startCourse(courseId: ID!): UpdateResponse
    deleteStartCourse(courseId: ID!): UpdateResponse

    createUser(user: UserInput!): UpdateResponse
    updateUser(user: UserInput!): UpdateResponse
    updateUserSetting(setting: UserSettingInput): UpdateResponse
    deleteUser: UpdateResponse

    createTag(name: String!): CreateTagResponse
}

type CreateResponse {
    id: ID!,
}

type CreateTagResponse {
    id: ID!,
    name: String!
}

type UpdateResponse {
}
